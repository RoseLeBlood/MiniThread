.TH "basic_semaphore" 3 "Tue Sep 15 2020" "Version 1.6x" "Mini Thread" \" -*- nroff -*-
.ad l
.nh
.SH NAME
basic_semaphore
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <mn_semaphore\&.hpp>\fP
.PP
Inherited by \fBbasic_binary_semaphore\fP, \fBbasic_counting_semaphore\fP, and \fBbasic_mutex\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbasic_semaphore\fP ()"
.br
.ti -1c
.RI "virtual int \fBlock\fP (unsigned int timeout=(unsigned int) 0xffffffffUL)"
.br
.ti -1c
.RI "virtual int \fBunlock\fP ()"
.br
.ti -1c
.RI "virtual bool \fBtry_lock\fP ()"
.br
.ti -1c
.RI "bool \fBis_initialized\fP () const"
.br
.ti -1c
.RI "void * \fBget_handle\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "void * \fBm_pSpinlock\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This file is part of the Mini Thread Library (https://github.com/RoseLeBlood/MiniThread )\&. Copyright (c) 2018 Amber-Sophia Schroeck
.PP
The Mini Thread Library is free software; you can redistribute it and/or modify 
.br
 it under the terms of the GNU Lesser General Public License as published by 
.br
 the Free Software Foundation, version 3, or (at your option) any later version\&.
.PP
The Mini Thread Library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\&. See the GNU General Public License for more details\&.
.PP
You should have received a copy of the GNU Lesser General Public License along with the Mini Thread Library; if not, see https://www.gnu.org/licenses/\&. 
.br
 Base wrapper class around FreeRTOS's implementation of semaphores\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "basic_semaphore::basic_semaphore ()"
This file is part of the Mini Thread Library (https://github.com/RoseLeBlood/MiniThread )\&. Copyright (c) 2018 Amber-Sophia Schroeck
.PP
The Mini Thread Library is free software; you can redistribute it and/or modify 
.br
 it under the terms of the GNU Lesser General Public License as published by 
.br
 the Free Software Foundation, version 3, or (at your option) any later version\&.
.PP
The Mini Thread Library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\&. See the GNU General Public License for more details\&.
.PP
You should have received a copy of the GNU Lesser General Public License along with the Mini Thread Library; if not, see https://www.gnu.org/licenses/\&. 
.br
 
.SH "Member Function Documentation"
.PP 
.SS "void* basic_semaphore::get_handle ()\fC [inline]\fP"
Get the FreeRTOS handle
.PP
\fBReturns\fP
.RS 4
the FreeRTOS handle 
.RE
.PP

.SS "bool basic_semaphore::is_initialized () const"
Is the spinlock created (initialized) ?
.PP
\fBReturns\fP
.RS 4
true if the spinlock created (initialized) and false when not 
.RE
.PP

.SS "int basic_semaphore::lock (unsigned int timeout = \fC(unsigned int) 0xffffffffUL\fP)\fC [virtual]\fP"
Aquire (take) a semaphore\&.
.PP
Example of blocking indefinitely: aSemaphore\&.Take();
.PP
Example of blocking for 100 ticks: aSemaphore\&.Take(100);
.PP
\fBParameters\fP
.RS 4
\fItimeout\fP How long to wait to get the Lock until giving up\&. 
.RE
.PP
\fBReturns\fP
.RS 4
ERR_SPINLOCK_OK if the Semaphore was acquired, ERR_SPINLOCK_LOCK if it timed out\&. 
.RE
.PP

.PP
Reimplemented in \fBrecursive_mutex\fP, and \fBbasic_mutex\fP\&.
.SS "bool basic_semaphore::try_lock ()\fC [virtual]\fP"
Try to lock the spinlock
.PP
\fBNote\fP
.RS 4
call lock with timeout from 0
.RE
.PP
\fBReturns\fP
.RS 4
true if the Lock was acquired, false when not 
.RE
.PP

.PP
Reimplemented in \fBbasic_mutex\fP\&.
.SS "int basic_semaphore::unlock ()\fC [virtual]\fP"
Release (give) a semaphore\&.
.PP
\fBReturns\fP
.RS 4
ERR_SPINLOCK_OK if the Semaphore was released, ERR_SPINLOCK_UNLOCK if it failed\&. 
.RE
.PP

.PP
Reimplemented in \fBrecursive_mutex\fP, and \fBbasic_mutex\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "void* basic_semaphore::m_pSpinlock\fC [protected]\fP"
FreeRTOS semaphore handle\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Mini Thread from the source code\&.
